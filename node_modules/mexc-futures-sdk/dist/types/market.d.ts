export interface RiseFallRates {
    zone: string;
    r: number;
    v: number;
    r7: number;
    r30: number;
    r90: number;
    r180: number;
    r365: number;
}
export interface TickerData {
    contractId: number;
    symbol: string;
    lastPrice: number;
    bid1: number;
    ask1: number;
    volume24: number;
    amount24: number;
    holdVol: number;
    lower24Price: number;
    high24Price: number;
    riseFallRate: number;
    riseFallValue: number;
    indexPrice: number;
    fairPrice: number;
    fundingRate: number;
    maxBidPrice: number;
    minAskPrice: number;
    timestamp: number;
    riseFallRates: RiseFallRates;
    riseFallRatesOfTimezone: number[];
}
export interface TickerResponse {
    success: boolean;
    code: number;
    data: TickerData;
}
export interface ContractDetail {
    symbol: string;
    displayName: string;
    displayNameEn: string;
    positionOpenType: number;
    baseCoin: string;
    quoteCoin: string;
    settleCoin: string;
    contractSize: number;
    minLeverage: number;
    maxLeverage: number;
    priceScale: number;
    volScale: number;
    amountScale: number;
    priceUnit: number;
    volUnit: number;
    minVol: number;
    maxVol: number;
    bidLimitPriceRate: number;
    askLimitPriceRate: number;
    takerFeeRate: number;
    makerFeeRate: number;
    maintenanceMarginRate: number;
    initialMarginRate: number;
    riskBaseVol: number;
    riskIncrVol: number;
    riskIncrMmr: number;
    riskIncrImr: number;
    riskLevelLimit: number;
    priceCoefficientVariation: number;
    indexOrigin: string[];
    state: number;
    isNew: boolean;
    isHot: boolean;
    isHidden: boolean;
    conceptPlate: string[];
    riskLimitType: string;
    maxNumOrders: number[];
    marketOrderMaxLevel: number;
    marketOrderPriceLimitRate1: number;
    marketOrderPriceLimitRate2: number;
    triggerProtect: number;
    appraisal: number;
    showAppraisalCountdown: number;
    automaticDelivery: number;
    apiAllowed: boolean;
}
export interface ContractDetailResponse {
    success: boolean;
    code: number;
    data: ContractDetail | ContractDetail[];
}
export interface DepthEntry {
    0: number;
    1: number;
    2?: number;
}
export interface ContractDepthData {
    asks: DepthEntry[];
    bids: DepthEntry[];
    version: number;
    timestamp: number;
}
export interface ContractDepthResponse {
    success?: boolean;
    code?: number;
    data?: ContractDepthData;
    asks?: DepthEntry[];
    bids?: DepthEntry[];
    version?: number;
    timestamp?: number;
}
//# sourceMappingURL=market.d.ts.map