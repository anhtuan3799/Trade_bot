/**
 * Base error class for MEXC Futures SDK
 */
export declare class MexcFuturesError extends Error {
    readonly code?: string | number;
    readonly statusCode?: number;
    readonly originalError?: any;
    readonly timestamp: Date;
    constructor(message: string, code?: string | number, statusCode?: number, originalError?: any);
    /**
     * Get a user-friendly error message
     */
    getUserFriendlyMessage(): string;
    /**
     * Get error details for logging
     */
    getDetails(): Record<string, any>;
}
/**
 * Authentication related errors
 */
export declare class MexcAuthenticationError extends MexcFuturesError {
    constructor(message?: string, originalError?: any);
    getUserFriendlyMessage(): string;
}
/**
 * API related errors (4xx, 5xx responses)
 */
export declare class MexcApiError extends MexcFuturesError {
    readonly endpoint?: string;
    readonly method?: string;
    readonly responseData?: any;
    constructor(message: string, code: string | number, statusCode: number, endpoint?: string, method?: string, responseData?: any, originalError?: any);
    getUserFriendlyMessage(): string;
    getDetails(): Record<string, any>;
}
/**
 * Network related errors (timeouts, connection issues)
 */
export declare class MexcNetworkError extends MexcFuturesError {
    constructor(message: string, originalError?: any);
    getUserFriendlyMessage(): string;
}
/**
 * Validation errors for request parameters
 */
export declare class MexcValidationError extends MexcFuturesError {
    readonly field?: string;
    constructor(message: string, field?: string);
    getUserFriendlyMessage(): string;
}
/**
 * Signature related errors
 */
export declare class MexcSignatureError extends MexcFuturesError {
    constructor(message?: string, originalError?: any);
    getUserFriendlyMessage(): string;
}
/**
 * Rate limiting errors
 */
export declare class MexcRateLimitError extends MexcFuturesError {
    readonly retryAfter?: number;
    constructor(message: string, retryAfter?: number, originalError?: any);
    getUserFriendlyMessage(): string;
}
/**
 * Parse axios error and convert to appropriate MEXC error
 */
export declare function parseAxiosError(error: any, endpoint?: string, method?: string): MexcFuturesError;
/**
 * Format error for logging
 */
export declare function formatErrorForLogging(error: MexcFuturesError): string;
//# sourceMappingURL=errors.d.ts.map